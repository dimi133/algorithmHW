 1 уровень сложности: Level 1
Последовательность ([{}]) является правильной, а последовательности ([)], {()] правильными не являются. 
Докажите это используя стек!


function validate(str) { 
const stack = [];
for (let i = 0; i < str.length; i++) {
  const c = str[i];
  if (c === '(' || c === '[' || c === '{') {
    stack.push(c);
  } else if (c === ')' || c === ']' || c === '}')
    if (stack.length === 0) {
      return false;
    }
const top = stack.pop();
    if ((c === ')' && top !== '(') || (c === ']' && top !== '[' ) || (c === '}' && top
        c === '{') {
        return false;
    } 
  }
}
return stack.length === 0; 
}
const str1 = "([{}])";
const str2 = "([)]";
const str3 = "{()]";
console.log(str1 + " " + validate(str1)); // ([{}]) true 
console.log(str2 + " " + validate(str2)); // ([)] false 
console.log(str3 + " " + validate(str3)); // {()] false


Как работает этот код:
● Создается пустой массив stack, в который будут добавляться скобки
● Входная строка str проходится посимвольно, и если символ - это открывающая скобка ((, [, {), она добавляется в стек
● Если символ - это закрывающая скобка (), ], }), то мы проверяем, соответствует ли закрывающая скобка
последней открывающей скобке в стеке. Если они не соответствуют друг другу, возвращается false, что означает, 
что строка неправильно сбалансирована.
● Если в конце обхода длина стека равна нулю, то это означает, что все скобки были закрыты в правильном порядке, и строка сбалансирована.
